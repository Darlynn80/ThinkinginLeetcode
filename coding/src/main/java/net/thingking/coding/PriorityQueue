import java.util.Comparator;
import java.util.Iterator;
import java.util.NoSuchElementException;

/**
 * Created by bai_l on 2017/7/3.
 *
 * 优先级队列
 */
public class MaxPQ<Key> implements Iterable<Key>{
    private Key[] pq;
    private int n;
    private Comparator<Key> comparator;

    //初始化
    public MaxPQ(int initCapacity) {
        pq = (Key[]) new Object[initCapacity+1];
        n=0;
    }

    //初始化
    public MaxPQ(int size, Comparator<Key> comparator) {
        this(1);
    }

    // 下标i元素和下标j元素比较
    private boolean compare(int i, int j) {
        if (comparator==null) {
            return ((Comparable<Key>)pq[i]).compareTo(pq[j]) <0;
        }
        return comparator.compare(pq[i], pq[j])<0;
    }

    //交换元素位置
    private void exch(int i, int j) {
        Key swap = pq[i];
        pq[i] = pq[j];
        pq[j] = swap;
    }

    //上滤操作
    private void swim(int k) {
        while (k>1 && compare(k/2, k)) {
            exch(k, k/2);
            k = k/2;
        }
    }

    //下滤操作
    private void sink(int k) {
        while (2*k <= n) {
            int j = 2*k;
            if (j<n && compare(j, j+1))
                j++;
            if (!compare(k,j))
                break;
            exch(k,j);
            k = j;
        }
    }

    //调整数组容量
    private void resize(int capacity) {
        assert capacity>n;
        Key[] temp = (Key[]) new Object[capacity];
        for (int i=0; i<pq.length; i++) {
            temp[i] = pq[i];
        }
        pq = temp;
    }

    //插入操作
    public void insert(Key x) {
        if (n>=pq.length-1) {
            resize(2*pq.length);
        }
        pq[++n] = x;
        swim(n);
//        assert  isMaxHeap();
    }

    //删除操作
    public Key delMax() {
        if (isEmpty()) throw new NoSuchElementException("Priority queue underflow");
        Key max = pq[1];
        exch(1, n);
        n--;
        sink(1);
        pq[n+1] = null;     // to avoid loiterig and help with garbage collection
        if ((n > 0) && (n == (pq.length - 1) / 4)) resize(pq.length / 2);
//        assert isMaxHeap();
        return max;
    }

    private boolean isEmpty() {
        return n==0;
    }

    // is pq[1..N] a max heap?
    private boolean isMaxHeap() {
        return isMaxHeap(1);
    }

    // is subtree of pq[1..n] rooted at k a max heap?
    private boolean isMaxHeap(int k) {
        if (k > n) return true;
        int left = 2*k;
        int right = 2*k + 1;
        if (left  <= n && compare(k, left))  return false;
        if (right <= n && compare(k, right)) return false;
        return isMaxHeap(left) && isMaxHeap(right);
    }

    @Override
    public Iterator<Key> iterator() {
        return new HeapIterator();
    }

    private class HeapIterator implements Iterator<Key> {
        // create a new pq
        private MaxPQ<Key> copy;
        // add all items to copy of heap
        // takes linear time since already in heap order so no keys move
        public HeapIterator() {
            if (comparator == null)
                copy = new MaxPQ<Key>(size());
            else
                copy = new MaxPQ<Key>(size(), comparator);
            for (int i = 1; i <= n; i++)
                copy.insert(pq[i]);
        }

        private int size() {
            return n;
        }

        public boolean hasNext()  { return !copy.isEmpty();                     }
        public void remove()      { throw new UnsupportedOperationException();  }
        public Key next() {
            if (!hasNext()) throw new NoSuchElementException();
            return copy.delMax();
        }
    }

    /**
     * Rearranges the array in ascending order, using the natural order.
     * @param pq the array to be sorted
     */
//    public void sort(Comparable[] pq) {
//        int n = pq.length;
//        for (int k = n/2; k >= 1; k--)
//            sink(pq, k, n);
//        while (n > 1) {
//            exch(pq, 1, n--);
//            sink(pq, 1, n);
//        }
//    }
}
